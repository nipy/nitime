name: Build

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  job_metadata:
    runs-on: ubuntu-latest
    outputs:
      commit_message: ${{ steps.get_commit_message.outputs.commit_message }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Print head git commit message
        id: get_commit_message
        run: |
          if [[ -z "$COMMIT_MSG" ]]; then
            COMMIT_MSG=$(git show -s --format=%s $REF)
          fi
          echo commit_message=$COMMIT_MSG | tee -a $GITHUB_OUTPUT
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          REF: ${{ github.event.pull_request.head.sha }}

  build-sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build sdist
        run: pipx run build -s
      - uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*.tar.gz

  build-wheel:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    needs: [job_metadata]
    runs-on: ${{ matrix.buildplat[0] }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || contains(needs.job_metadata.outputs.commit_message, '[build wheels]')
    strategy:
      fail-fast: false
      matrix:
        buildplat:
          - [ubuntu-20.04, manylinux_x86_64]
          - [ubuntu-20.04, musllinux_x86_64]
          - [macos-12, macosx_*]
          - [windows-2019, win_amd64]
        python: ["cp312"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v3

      - name: Update pip/pipx
        run: pip install --upgrade pip pipx

      - name: Build wheel(s)
        run: pipx run --spec "cibuildwheel>=2.15" cibuildwheel
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.python == '*' && 'all' || matrix.python }}-${{ startsWith(matrix.buildplat[1], 'macosx') && 'macosx' || matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl

  test-sdist:
    name: Test sdist
    needs: [build-sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: sdist
          path: ./dist
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install sdist
        run: pip install dist/*.tar.gz
      - run: python -c 'import nitime; print(nitime.__version__)'
      - name: Install pytest
        run: pip install pytest
      - name: Run tests
        run: pytest -v --pyargs nitime

  test-wheel:
    name: Test wheel
    needs: [build-wheel]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist/
      - name: Consolidate and list wheels
        run: |
          mkdir wheelhouse
          mv dist/*/*.whl wheelhouse
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install wheel
        run: pip install --find-links ./wheelhouse --pre nitime
      - run: python -c 'import nitime; print(nitime.__version__)'
      - name: Install pytest
        run: pip install pytest
      - name: Run tests
        run: pytest -v --pyargs nitime

  pre-publish:
    runs-on: ubuntu-latest
    needs: [test-sdist, test-wheel]
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist/
      - name: Check artifacts
        run: ls -lR
      - name: Consolidate and re-check
        run: |
          mv dist/*/*.{tar.gz,whl} dist
          rmdir dist/*/
          ls -lR
      - run: pipx run twine check dist/*

  publish:
    runs-on: ubuntu-latest
    environment: "Package deployment"
    needs: [pre-publish]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist/
      - name: Consolidate artifacts
        run: |
          mv dist/*/*.{tar.gz,whl} dist
          rmdir dist/*/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
